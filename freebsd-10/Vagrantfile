# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'socket'
require 'ipaddr'

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"


Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.hostname = "postgis-vagrant"

  # To confirm that ssh fowarding is working, run the following from inside the
  # guest machine:
  #
  #   ssh -T git@github.com
  #
  # You should see something like "Hi <your name here>! You've successfully
  # authenticated, but GitHub does not provide shell access."
  #
  # You may need to run `ssh-add` on your host machine to add your private key
  # identities to the authentication agent.
  config.ssh.forward_agent = true
  
  # For remote access to the PostgreSQL server, 
  # forward port 6543 on the host to 5432 on the guest
  config.vm.network :forwarded_port, guest: 5432, host: 6546

  # VirtualBox specific configurations
  config.vm.provider :virtualbox do |vb|

    # How much memory to use?
    vb.customize ["modifyvm", :id, "--memory", 2048]

    # How many CPUs to use?
    vb.customize ["modifyvm", :id, "--cpus", 1]

    # Fast I/O?
    # vb.customize ["modifyvm", :id, "--ioapic", "on"]

    # Use the VirtualBox GUI for graphic desktop?
    vb.gui = false
    
  end

  # Windows specific configuration
  if RUBY_PLATFORM.include? "win32"
    config.vm.synced_folder ".", "/vagrant", type: "smb"
  else
    config.vm.network "private_network", type: "dhcp"
    config.vm.synced_folder ".", "/vagrant", disabled: true
  end


  ##################################################################################
  # FreeBSD 10
  #
  config.vm.box = "chef/freebsd-10.0" 
  config.vm.box_url = "https://vagrantcloud.com/chef/boxes/freebsd-10.0/versions/1.0.0/providers/virtualbox.box"

  updateCmd = "pkg update; pkg install -y -q pkg; pkg update -f;"

  packageCmd = "pkg install -y -q"
  packageList = [
    "git",
    "subversion",
    "cmake",
    "automake",
    "autoconf",
    "libtool",
    "gmake",
    "screen",
    "gtk2",
    "geos",
    "gdal",
    "proj",
    "libxml2",
    "libiconv",
    "json-c",
    "cunit",
    "libxslt",
    "iconv",
    "gettext",
    "ImageMagick-nox11",
    "docbook-xsl",
    "docbook-xml",
    "postgresql93-server",
    "postgresql93-client",
    "postgresql93-contrib"    
  ];

    
  # Run the initialization only the first time...
  if Dir.glob("#{File.dirname(__FILE__)}/.vagrant/machines/default/*/id").empty?


    # Update the base software
    config.vm.provision :shell, :inline => updateCmd

    # install packages we need we need
    inlineScript = ""
    inlineScript << packageCmd << " " << packageList.join(" ") << " ; "
    config.vm.provision :shell, :inline => inlineScript

    # scripts = [
    #   "cunit.sh",
    #   "postgresql.sh"
    # ];

    # scripts.each { |script| config.vm.provision :shell, :path => "scripts/" << script }
    
  end
  

end
